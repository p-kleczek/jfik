/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(EG1)package main;import java.util.Stack;@ SuppressWarnings("unused") public class EG1{  public static final String nl = System.getProperty("line.separator");  public static final String breakLine = "<br>";  public static final String textOpen = "~textopen~";  public static final String textClose = "~textclose~";  public static boolean isDel = false;  public static boolean isSup = false;  public static boolean isSub = false;  public static boolean isNowiki = false;  public static boolean isCode = false;  public static boolean isFile = false;}PARSER_END(EG1)TOKEN :{  < ARROW_RIGHT : "->" >| < ARROW_LEFT : "<-" >| < ARROW_BI : "<->" >| < DOUBLE_ARROW_RIGHT : "=>" >| < DOUBLE_ARROW_LEFT : "<=" >| < DOUBLE_ARROW_BI : "<=>" >| < QUOTE_OPEN : "<<" >| < QUOTE_CLOSE : ">>" >| < DASH_SHORT : "--" >| < DASH_LONG : "---" >| < SYMBOL_COPYRIGHT : "(c)" >| < SYMBOL_TRADEMARK : "(tm)" >| < SYMBOL_REGISTERED : "(r)" >| < RESOLUTION : < NUMBER > "x" < NUMBER >>}TOKEN :{  < NUMBER : (< DIGIT >)+ >| < WORD : (< LETTER >)+ >| < #ALNUM :    (      < DIGIT >    | < LETTER >    )+ >| < PARA :    "\r"  | "\n"  | "\r\n" >| < NEW_LINE : "\\\\" >| < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "a"-"z", "A"-"Z" ] >}TOKEN :{  < HR : "----" ("-")* < PARA >>
| < HEADLINE_END : " ==" ("=")* < PARA >>}TOKEN :{  < URL :    (      "www."    | "http://"    )    < DOMAIN >    (      ("/" < WORD >)* "." < WORD >    )? >| < #DOMAIN : (< ALNUM > ".")+ < WORD >>  //| < E_MAIL_TAG : "<" < E_MAIL > ">" >
| < E_MAIL : < E_MAIL_USERNAME > "@" < DOMAIN >>| < #E_MAIL_USERNAME : (< ALNUM > ".")* < ALNUM >>}TOKEN :{  < LINKO : "[[" >| < LINKC : "]]" >| < IMAGEO : "{{" >| < IMAGEC : "}}" >| < DOUBLE_SPACE : "  " >}TOKEN :{  < DELO : "<del>" >| < DELC : "</del>" >}TOKEN :{  < SUPO : "<sup>" >| < SUPC : "</sup>" >}TOKEN :{  < SUBO : "<sub>" >| < SUBC : "</sub>" >}TOKEN :{  < CODEO : "<code>" >| < CODEC : "</code>" >}TOKEN :{  < FILEO : "<file>" >| < FILEC : "</file>" >}TOKEN :{  < NOWIKIO : "<nowiki>" >| < NOWIKIC : "</nowiki>" >}TOKEN :{  < BOLD : "**" >| < ITALICS : "//" >| < UNDERLINE : "__" >| < NO_FORAT : "%%" >}// special chars: #.: (link), *- (list), < > (email), = (hn), ?| (image)
TOKEN :{  < PUNCT :    "!"  | "\""  | "$"  | "%"  | "&"  | "'"  | "("  | ")"  | "+"  | ","  | "/"  | ";"  | "@"  | "["  | "]"  | "\\"  | "^"  | "_"  | "{"  | "}"  | "~" >}String start() :{  String s = "";  String out = "";  Token t;}{  {    System.out.print("\nSTART\n");  }  (    LOOKAHEAD(< HR >  | headline())    (      (        t = < HR >        {          out += "<hr>" + nl;        }      |        (          s = headline()        )        {          out += s + nl;        }      )    )  |    (      (        LOOKAHEAD(quote())        s = quote()      |        (          LOOKAHEAD(list())          s = list()        |          (            LOOKAHEAD(codeBySpaces())            s = codeBySpaces()          |            (              s = text()              {                s = textOpen + s + textClose;              }            )          )        )      )      {        out += s;        if (!s.contains(textOpen)) out += nl;        //        out += s + nl;      }    )  | (< PARA >    {
      System.out.println("[NL]");      out += nl;    }    )  )+  < EOF >  {    System.out.println("END");    // Remove duplicated NL sequences.
    System.out.println(out);    String manyNl = String.format("(%s){2,}", nl);    out = out.replaceAll(textClose + nl + textOpen, " ");    out = out.replaceAll(textClose + manyNl + textOpen, "</p>" + nl + "<p>");    out = out.replaceAll(textOpen, "<p>").replaceAll(textClose, "</p>");    return out.replaceAll(String.format("(%s)+", nl), nl);  }}String text() :{  String s;  Token t;  String out = "";}{  {    System.out.print("text ");  }  (    LOOKAHEAD(typo())    (      s = typo()      {        out += s;      }    )  |    (      LOOKAHEAD(simpleTag())      s = simpleTag()    |      (        LOOKAHEAD(format())        s = format()      |        (          LOOKAHEAD(newline())          s = newline()        | s = plainTextPiece()        | t = < BOLD >          {            s = t.image;          }        | t = < ITALICS >          {            s = t.image;          }        | t = < UNDERLINE >          {            s = t.image;          }        )      )    )    {      if (s.contains("ERROR"))      {        return "ERROR ";      }      else      {        out += s;      }      System.out.println(" | " + out);    }
  )+  {    return out;  }}String newline() :{}{  (    < NEW_LINE >    (      " "    | < PARA >    )  )  {
    System.out.println("[NL (\\)]");    return nl + breakLine + nl;  }}String number() :{  Token t;}{  {    System.out.print("number ");  }  t = < NUMBER >  {    return t.image;  }}String word() :{  Token t;}{  {    System.out.print("word ");  }  t = < WORD >  {    return t.image;  }}String plainTextPiece() :{  String s;  Token t;}{  (    s = linkPlainTextPiece()  | s = imagePlainTextPiece()  )  {    return s;  }}String linkPlainTextPiece() :{  String s;  Token t;}{  s = basicPlainTextPiece()  {    return s;  }| t = < IMAGEC >  {    return t.image;  }}String imagePlainTextPiece() :{  String s;  Token t;}{  s = basicPlainTextPiece()  {    return s;  }| t = < LINKC >  {    return t.image;  }}String basicPlainTextPiece() :{  String s;  Token t;}{  {    System.out.print("lptp ");  }  (    s = word()  | s = number()  )  {    return s;  }| "<"  {    return "<";  }| ">"  {    return ">";  }| "*"  {    return "*";  }| "-"  {    return "-";  }| " "  {    return " ";  }| "="  {    return "=";  }| "."  {    return ".";  }| "#"  {    return "#";  }| "?"  {    return "?";  }| "|"  {    return "|";  }| ":"  {    return "|";  }| t = < PUNCT >  {    return t.image;  }|  // TODO : < IMAGEO > (i inne ewentualne znaczniki)  (    t = < LINKO >    //  | t = < IMAGEO >
  | t = < DOUBLE_SPACE >  | t = < NEW_LINE >    // XXX: lexical states?
  | t = < ARROW_RIGHT >  | t = < ARROW_LEFT >  | t = < ARROW_BI >  | t = < DOUBLE_ARROW_RIGHT >  | t = < DOUBLE_ARROW_LEFT >  | t = < DOUBLE_ARROW_BI >  | t = < QUOTE_OPEN >  | t = < QUOTE_CLOSE >  | t = < DASH_SHORT >  | t = < DASH_LONG >  | t = < SYMBOL_COPYRIGHT >  | t = < SYMBOL_TRADEMARK >  | t = < SYMBOL_REGISTERED >  | t = < RESOLUTION >  )  {    return t.image;  }}String wiki() :{  String s;  Token t;  String out = "";}{  {    System.out.print("wiki ");  }  s = alnum()  {    out += s;  }  (    (      "."      {        out += ".";      }    | "-"      {        out += "-";      }    | "_"      {        out += "_";      }    | ":"      {        out += ":";      }    | "#"      {        out += "#";      }    )    s = alnum()    {      out += s;    }  )*  {    if (!out.contains(":")) out = "/wiki:" + out;    else out = "/" + out;    return out;  }}String emailTag() :{  Token t;}{  {    System.out.print("email ");  }  "<" t = < E_MAIL > ">"  {    String href = t.image;    String title = t.image;    href = href.replaceAll("@", "%20%5Bat%5D%20");    href = href.replaceAll("\\.", "%20%5Bdot%5D%20");    title = title.replaceAll("@", " [at] ");    title = title.replaceAll("\\.", " [dot] ");    return String.format("<a href=\"mailto:%s\" class=\"mail\" title=\"%s\">%s</a>", href, title, title);  }}String alnum() :{  String s;  String st = "";}{  (    s = word()    {      st += s;    }  | s = number()    {      st += s;    }  )+  {    return st;  }}String url() :{  Token t;}{  t = < URL >  {    return t.image;  }}String link() :{  String s;}{  (    s = wiki()  | s = url()  )  {    return s;  }}String imageUrl() :{  String s;}{  (    (" ")? s = url() (" ")?  )  {    return "iurl=[" + s + "]";  }}String image() :{  Token t;  String s;  String url;  Integer nalign = 0; // 0 - brak, 1 - lewo, 2 - prawo, 3 - oba
  Integer width =-1;  Integer height =-1;  String title = "";  boolean isWiki = false;}{  < IMAGEO > (" "  {    nalign += 1;  }  )? s = link()  {    url = s;    isWiki = url.startsWith("/");    if (isWiki) url = "/_media" + url;  }  (" "  {    nalign += 2;  }  )?  (    "?"    (      (        t = < NUMBER >        {          width = Integer.valueOf(t.image);        }      )    |      (        t = < RESOLUTION >        {          String w = t.image.substring(0, t.image.indexOf('x'));          String h = t.image.substring(t.image.indexOf('x') + 1);          width = Integer.valueOf(w);          height = Integer.valueOf(h);        }      )    )  )?  (    "|"    {      title = "";    }    (      s = imagePlainTextPiece()      {        title += s;      }    )*  )?  < IMAGEC >  {    String alignOption = "";    switch (nalign)    {      case 0 : // fall
      case 1 : // fall (align = "left";)      break;      case 2 : alignOption = "right";      break;      case 3 : alignOption = "middle";      break;    }    String align = (alignOption.isEmpty()) ? "" : " align=\"" + alignOption + "\"";    String titleAttr = (title.isEmpty()) ? "" : " title=\"" + title + "\"";    String out = String.format("<img src=\"%s\"%s alt=\"%s\"%s", url, titleAttr, title, align);    if (width != - 1) out += String.format(" width=\"%d\"", width);    if (height != - 1) out += String.format(" height=\"%d\"", height);    out += ">";    return out;  }}String linkTag() :{  Token t;  String s;  String url;  String title = "";  String titleAttr = "";  boolean isWiki = false;}{  {    System.out.print("link ");  }  (    < LINKO > s = link()    {      url = s;      isWiki = url.startsWith("/");      title = (isWiki) ? url.replaceAll("#(.)*", "").substring(url.lastIndexOf(':') + 1) : url;      titleAttr = (isWiki) ? url.substring(1).replaceAll("#(.)*", "") : url;    }    (      "|"      (        {          title = "";        }        (          s = linkPlainTextPiece()          {            title += s;          }        )+      | s = image()        {          title = s;        }      )    )?    // TODO: tytul moze byc tekstem!
    < LINKC >  )  {    String rel = (isWiki) ? " rel=\"nofollow\"" : "";    return String.format("<a href=\"%s\" title=\"%s\"%s>%s</a>", url, titleAttr, rel, title);  }}String typo() :{  Token t;}{  {    System.out.print("typo ");  }  < ARROW_RIGHT >  {    return Character.toString((char) 0x2192);  }| < ARROW_LEFT >  {    return Character.toString((char) 0x2190);  }| < ARROW_BI >  {    return Character.toString((char) 0x2194);  }| < DOUBLE_ARROW_RIGHT >  {    return Character.toString((char) 0x21D2);  }| < DOUBLE_ARROW_LEFT >  {    return Character.toString((char) 0x21D0);  }| < DOUBLE_ARROW_BI >  {    return Character.toString((char) 0x21D4);  }| < QUOTE_OPEN >  {    return Character.toString((char) 0x00AB);  }| < QUOTE_CLOSE >  {    return Character.toString((char) 0x00BB);  }| < DASH_SHORT >  {    return Character.toString((char) 0x2013);  }| < DASH_LONG >  {    return Character.toString((char) 0x2014);  }| < SYMBOL_COPYRIGHT >  {    return Character.toString((char) 0x00A9);  }| < SYMBOL_TRADEMARK >  {    return Character.toString((char) 0x2122);  }| < SYMBOL_REGISTERED >  {    return Character.toString((char) 0x00AE);  }| t = < RESOLUTION >  {    return t.image.replaceAll("x", Character.toString((char) 0x00D7));  }}String simpleTag() :{  String s;}{  {    System.out.print("simple ");  }  (    s = bold()  | s = italics()  | s = underline()  )  {    return s;  }}String bold() :{  String s = "";  String out = "";}{  {    System.out.print("bold ");  }  (    < BOLD >    (      (        (          s = typo()        | s = italics()        | s = underline()        | s = format()        | s = plainTextPiece()        )        {          out += s;        }      )+    )?    < BOLD >  )  {    if (isNowiki || isCode || isFile)
    {      return "**" + out + "**";    }    return "<b>" + out + "</b>";  }}String italics() :{  String s = "";  String out = "";}{  {    System.out.print("italics ");  }  (    < ITALICS >    (      (        (          //s = bold()
          //|	s = text() // TODO: text __BEZ__ bolda!
          s = typo()        | s = bold()        | s = underline()        | s = format()        | s = plainTextPiece()        )        {          out += s;        }      )+    )?    < ITALICS >  )  {    if (isNowiki || isCode || isFile)
    {      return "//" + out + "//";    }    return "<i>" + out + "</i>";  }}String underline() :{  String s = "";  String out = "";}{  {    System.out.print("underline ");  }  (    < UNDERLINE >    (      (        (          //s = bold()
          //|	s = text() // TODO: text __BEZ__ bolda!
          s = typo()        | s = bold()        | s = italics()        | s = format()        | s = plainTextPiece()        )        {          out += s;        }      )+    )?    < UNDERLINE >  )  {    if (isNowiki || isCode || isFile)
    {      return "__" + out + "__";    }    return "<u>" + out + "</u>";  }}String ocTag() :{  String s;}{  {    System.out.print("octag ");  }  s = emailTag()  {    return s;  }| s = htmlTag()  {    return s;  }| s = image()  {    return s;  }| s = linkTag()  {    return s;  }}String htmlTag() :{  String s;}{  s = nowikiTag()  {    return s;  }| s = codeTag()  {    return s;  }| s = fileTag()  {    return s;  }| s = delTag()  {    return s;  }| s = supTag()  {    return s;  }| s = subTag()  {    return s;  }}String fileTag() :{  String s = "";  String out = "";}{  (    {      System.out.print("file ");      if (isCode || isFile)      {        System.out.print("ERROR");        return "ERROR";      }      else      {        isFile = true;      }    }    < FILEO >    (      s = text()    )    < FILEC >    {      out += s;    }  )  {    isFile = false;    return "<code>" + out + "</code>";  }}String codeTag() :{  String s = "";  String out = "";}{  (    {      System.out.print("code ");      if (isCode || isFile)      {        System.out.print("ERROR");        return "ERROR";      }      else      {        isCode = true;      }    }    < CODEO >    (      s = text()    )    < CODEC >    {      out += s;    }  )  {    isCode = false;    return "<code>" + out + "</code>";  }}String nowikiTag() :{  String s;}{  (    {      System.out.print("sup ");      if (isNowiki)      {        System.out.print("ERROR");        return "ERROR ";      }      else      {        isNowiki = true;      }    }    < NOWIKIO > s = text() < NOWIKIC >  )  {    isNowiki = false;    return s;  }}String supTag() :{  String s;}{  (    {      System.out.print("sup ");      if (isSup || isSub)      {        System.out.print("ERROR");        return "ERROR ";      }      else      {        isSup = true;      }    }    < SUPO > s = text() < SUPC >  )  {    isSup = false;    if (isNowiki || isCode || isFile)    {      return s;    }    return "<sup>" + s + "</sup>";  }}String subTag() :{  String s;}{  (    {      System.out.print("sub ");      if (isSup || isSub)      {        System.out.print("ERROR");        return "ERROR ";      }      else      {        isSub = true;      }    }    < SUBO > s = text() < SUBC >  )  {    isSub = false;    if (isNowiki || isCode || isFile)
    {      return s;    }    return "<sub>" + s + "</sub>";  }}String delTag() :{  String s;}{  (    {      System.out.print("DEL ");      if (isDel)      {        System.out.print("ERROR");        return "ERROR ";      }      else      {        isDel = true;      }    }    < DELO > s = text() < DELC >  )  {    isDel = false;    if (isNowiki || isCode || isFile)
    {      return s;    }    return "<del>" + s + "</del>";  }}//String text() :
//{
//  Token t;
//  String s = "";
//  String out = "";
//}
//{
//  {
//    System.out.print("text ");
//  }
//  (
//    (
//      (
//        (
//          "*"
//          {
//            out += "*";
//          }
//        | "/"
//          {
//            out += "/";
//          }
//        | "_"
//          {
//            out += "_";
//          }
//        )?
//        s = word() // XXX: tymczasowe
//      | s = format()
//      | s = number()
//      )
//      {
//        out += s;
//      }
//    )+
//  )
//  //  < EOF >
//  {
//    return out;
//  }
//}
String format() :{  String s;}{  (    s = ocTag()    //  | s = simpleTag()
  )  {    return s;  }}String ulist() :{  String s;  String out = "";  Integer prevNestLevel = 1;  Integer nestLevel = 0;  Integer spaces = 0;  Stack < Integer > openedLis = new Stack < Integer > ();}{  {    System.out.print("ul ");    out += "<ul>" + nl;  }  (    {      s = "";    }    < DOUBLE_SPACE >    {      spaces = 2;    }    (      " "      {        spaces++;      }    | < DOUBLE_SPACE >      {        spaces += 2;      }    )*    "*"    {      nestLevel = spaces / 2;    }    (      s = text()    )?    {      while (prevNestLevel >= nestLevel && !openedLis.isEmpty())      {        if (prevNestLevel == openedLis.peek())        {          out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\0', '\t'); // indent
          out += "</li>" + nl;          openedLis.pop();        }        if (prevNestLevel == nestLevel) break;        else        {          out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\0', '\t'); // indent
          out += "</ul>" + nl;          prevNestLevel--;        }      }      if (prevNestLevel < nestLevel) for (; prevNestLevel < nestLevel; prevNestLevel++)      {        out += new String(new char [ prevNestLevel + openedLis.size() ]).replace('\0', '\t'); // indent
        out += "<ul>" + nl;      }      System.out.println(String.format("nl=%d  pnl=%d", nestLevel, prevNestLevel));      out += new String(new char [ prevNestLevel + openedLis.size() ]).replace('\0', '\t'); // indent
      out += "<li>" + s + nl;      openedLis.push(nestLevel);    }    < PARA >  )+  {    {}    for (; prevNestLevel > 0; prevNestLevel--)    {      if (prevNestLevel == openedLis.peek())      {        out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\0', '\t'); // indent
        out += "</li>" + nl;        openedLis.pop();      }      out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\0', '\t'); // indent
      out += "</ul>" + nl;    }    return out;  }}String olist() :{  String s;  String out = "";  Integer prevNestLevel = 1;  Integer nestLevel = 0;  Integer spaces = 0;  Stack < Integer > openedLis = new Stack < Integer > ();}{  {    System.out.print("ol ");    out += "<ol>" + nl;  }  (    {      s = "";    }    < DOUBLE_SPACE >    {      spaces = 2;    }    (      " "      {        spaces++;      }    | < DOUBLE_SPACE >      {        spaces += 2;      }    )*    "-"    {      nestLevel = spaces / 2;    }    (      s = text()    )?    {      while (prevNestLevel >= nestLevel && !openedLis.isEmpty())      {        if (prevNestLevel == openedLis.peek())        {          out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\0', '\t'); // indent
          out += "</li>" + nl;          openedLis.pop();        }        if (prevNestLevel == nestLevel) break;        else        {          out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\0', '\t'); // indent
          out += "</ol>" + nl;          prevNestLevel--;        }      }      if (prevNestLevel < nestLevel) for (; prevNestLevel < nestLevel; prevNestLevel++)      {        out += new String(new char [ prevNestLevel + openedLis.size() ]).replace('\0', '\t'); // indent
        out += "<ol>" + nl;      }      System.out.println(String.format("nl=%d  pnl=%d", nestLevel, prevNestLevel));      out += new String(new char [ prevNestLevel + openedLis.size() ]).replace('\0', '\t'); // indent
      out += "<li>" + s + nl;      openedLis.push(nestLevel);    }    < PARA >  )+  {    for (; prevNestLevel > 0; prevNestLevel--)    {      if (prevNestLevel == openedLis.peek())      {        out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\0', '\t'); // indent
        out += "</li>" + nl;        openedLis.pop();      }      out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\0', '\t'); // indent
      out += "</ol>" + nl;    }    return out;  }}String list() :{  String s;}{  LOOKAHEAD(3) // czy L(3) wystarczy, gdy pierwszy poziom np. podw�jnie zagnie�d�ony?
  s = ulist()  {    return s;  }| s = olist()  {    return s;  }}String quote() :{  String s;  String out = "";  int prevNestLevel = 1;  int nestLevel = 0;  boolean brRequired = false;  boolean first = true;}{  {    System.out.print("q ");    out += "<blockquote>" + nl;  }  (    {      s = "";      nestLevel = 0;      brRequired = false;    }    (      (">"      {        nestLevel++;      }      )    | (< QUOTE_CLOSE >      {        nestLevel += 2;      }      )    )+    (      s = text()    )?    {      brRequired = (nestLevel == prevNestLevel);      while (prevNestLevel >= nestLevel)      {        if (prevNestLevel == nestLevel) break;        else        {          out += new String(new char [ prevNestLevel - 1 ]).replace('\0', '\t'); // indent
          out += "</blockquote>" + nl;          prevNestLevel--;        }      }      for (; prevNestLevel < nestLevel; prevNestLevel++)      {        out += new String(new char [ prevNestLevel ]).replace('\0', '\t'); // indent
        out += "<blockquote>" + nl;      }      out += new String(new char [ prevNestLevel ]).replace('\0', '\t'); // indent
      out += s;    }    < PARA >    {      if (brRequired && !first) out += "<br>";      out += nl;      first = false;    }  )+  {    {}    for (; prevNestLevel > 0; prevNestLevel--)    {      out += new String(new char [ prevNestLevel - 1 ]).replace('\0', '\t'); // indent
      out += "</blockquote>" + nl;    }    return out;  }}String headline() :{  String s = "";  String out = "";  int signs = 0;}{  {    System.out.println("headline");  }  ("="  {    signs++;  }  )+ " "  (    s = plainTextPiece()    {      out += s;    }  )*  < HEADLINE_END >  {    int level = Math.max(5 - signs + 2, 1);    return String.format("<h%d>%s</h%d>", level, out, level);  }}String codeBySpaces() :{  String s = "";  String out = "";}{  {    System.out.println("code");  }  (    < DOUBLE_SPACE >    (      s = plainTextPiece()      {        out += s;      }    )*    < PARA >    {      out += nl;      System.out.println(nl);    }  )+  {    return String.format("<pre>%s%s</pre>", nl, out);  }}
