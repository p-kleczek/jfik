/* Generated By:JavaCC: Do not edit this line. EG1.java */
package main;
import java.util.Stack;
@ SuppressWarnings("unused") public class EG1 implements EG1Constants {
  public static final String nl = System.getProperty("line.separator");

  public static final String breakLine = "<br>";

  public static final String textOpen = "~textopen~";
  public static final String textClose = "~textclose~";
  public static boolean isDel = false;
  public static boolean isSup = false;
  public static boolean isSub = false;

  final public String start() throws ParseException {
  String s = "";
  String out = "";
  Token t;
    System.out.print("\u005cnSTART\u005cn");
    label_1:
    while (true) {
      if (jj_2_4(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HR:
          t = jj_consume_token(HR);
          out += "<hr>" + nl;
          break;
        case 49:
          s = headline();
          jj_consume_token(PARA);
          out += s + nl;
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW_RIGHT:
        case ARROW_LEFT:
        case ARROW_BI:
        case DOUBLE_ARROW_RIGHT:
        case DOUBLE_ARROW_LEFT:
        case DOUBLE_ARROW_BI:
        case QUOTE_OPEN:
        case QUOTE_CLOSE:
        case DASH_SHORT:
        case DASH_LONG:
        case SYMBOL_COPYRIGHT:
        case SYMBOL_TRADEMARK:
        case SYMBOL_REGISTERED:
        case RESOLUTION:
        case NUMBER:
        case WORD:
        case NEW_LINE:
        case LINKO:
        case LINKC:
        case IMAGEO:
        case IMAGEC:
        case DOUBLE_SPACE:
        case DELO:
        case SUPO:
        case SUBO:
        case BOLD:
        case ITALICS:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
          if (jj_2_3(2147483647)) {
            s = quote();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ARROW_RIGHT:
            case ARROW_LEFT:
            case ARROW_BI:
            case DOUBLE_ARROW_RIGHT:
            case DOUBLE_ARROW_LEFT:
            case DOUBLE_ARROW_BI:
            case QUOTE_OPEN:
            case QUOTE_CLOSE:
            case DASH_SHORT:
            case DASH_LONG:
            case SYMBOL_COPYRIGHT:
            case SYMBOL_TRADEMARK:
            case SYMBOL_REGISTERED:
            case RESOLUTION:
            case NUMBER:
            case WORD:
            case NEW_LINE:
            case LINKO:
            case LINKC:
            case IMAGEO:
            case IMAGEC:
            case DOUBLE_SPACE:
            case DELO:
            case SUPO:
            case SUBO:
            case BOLD:
            case ITALICS:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
              if (jj_2_2(2147483647)) {
                s = list();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case ARROW_RIGHT:
                case ARROW_LEFT:
                case ARROW_BI:
                case DOUBLE_ARROW_RIGHT:
                case DOUBLE_ARROW_LEFT:
                case DOUBLE_ARROW_BI:
                case QUOTE_OPEN:
                case QUOTE_CLOSE:
                case DASH_SHORT:
                case DASH_LONG:
                case SYMBOL_COPYRIGHT:
                case SYMBOL_TRADEMARK:
                case SYMBOL_REGISTERED:
                case RESOLUTION:
                case NUMBER:
                case WORD:
                case NEW_LINE:
                case LINKO:
                case LINKC:
                case IMAGEO:
                case IMAGEC:
                case DOUBLE_SPACE:
                case DELO:
                case SUPO:
                case SUBO:
                case BOLD:
                case ITALICS:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                  if (jj_2_1(2147483647)) {
                    s = codeBySpaces();
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case ARROW_RIGHT:
                    case ARROW_LEFT:
                    case ARROW_BI:
                    case DOUBLE_ARROW_RIGHT:
                    case DOUBLE_ARROW_LEFT:
                    case DOUBLE_ARROW_BI:
                    case QUOTE_OPEN:
                    case QUOTE_CLOSE:
                    case DASH_SHORT:
                    case DASH_LONG:
                    case SYMBOL_COPYRIGHT:
                    case SYMBOL_TRADEMARK:
                    case SYMBOL_REGISTERED:
                    case RESOLUTION:
                    case NUMBER:
                    case WORD:
                    case NEW_LINE:
                    case LINKO:
                    case LINKC:
                    case IMAGEO:
                    case IMAGEC:
                    case DOUBLE_SPACE:
                    case DELO:
                    case SUPO:
                    case SUBO:
                    case BOLD:
                    case ITALICS:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                      s = text();
            s = textOpen + s + textClose;
                      break;
                    default:
                      jj_la1[1] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                  break;
                default:
                  jj_la1[2] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              break;
            default:
              jj_la1[3] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        out += s;

        if (!s.contains(textOpen))
                out += nl;
//        out += s + nl;

          break;
        case PARA:
          jj_consume_token(PARA);
    out += nl;
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW_RIGHT:
      case ARROW_LEFT:
      case ARROW_BI:
      case DOUBLE_ARROW_RIGHT:
      case DOUBLE_ARROW_LEFT:
      case DOUBLE_ARROW_BI:
      case QUOTE_OPEN:
      case QUOTE_CLOSE:
      case DASH_SHORT:
      case DASH_LONG:
      case SYMBOL_COPYRIGHT:
      case SYMBOL_TRADEMARK:
      case SYMBOL_REGISTERED:
      case RESOLUTION:
      case NUMBER:
      case WORD:
      case PARA:
      case NEW_LINE:
      case HR:
      case LINKO:
      case LINKC:
      case IMAGEO:
      case IMAGEC:
      case DOUBLE_SPACE:
      case DELO:
      case SUPO:
      case SUBO:
      case BOLD:
      case ITALICS:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
    System.out.println("END");
    // Remove duplicated NL sequences.
    System.out.println(out);
    String manyNl = String.format("(%s){2,}", nl);
    out = out.replaceAll(textClose + nl + textOpen, " ");
    out = out.replaceAll(textClose + manyNl + textOpen, "</p>" + nl + "<p>");
    out = out.replaceAll(textOpen, "<p>").replaceAll(textClose, "</p>");
    {if (true) return out.replaceAll(String.format("(%s)+", nl), nl);}
    throw new Error("Missing return statement in function");
  }

  final public String text() throws ParseException {
  String s;
  Token t;
  String out = "";
    System.out.print("text ");
    label_2:
    while (true) {
      if (jj_2_8(2147483647)) {
        s = typo();
        out += s;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW_RIGHT:
        case ARROW_LEFT:
        case ARROW_BI:
        case DOUBLE_ARROW_RIGHT:
        case DOUBLE_ARROW_LEFT:
        case DOUBLE_ARROW_BI:
        case QUOTE_OPEN:
        case QUOTE_CLOSE:
        case DASH_SHORT:
        case DASH_LONG:
        case SYMBOL_COPYRIGHT:
        case SYMBOL_TRADEMARK:
        case SYMBOL_REGISTERED:
        case RESOLUTION:
        case NUMBER:
        case WORD:
        case NEW_LINE:
        case LINKO:
        case LINKC:
        case IMAGEO:
        case IMAGEC:
        case DOUBLE_SPACE:
        case DELO:
        case SUPO:
        case SUBO:
        case BOLD:
        case ITALICS:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
          if (jj_2_7(2147483647)) {
            s = simpleTag();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ARROW_RIGHT:
            case ARROW_LEFT:
            case ARROW_BI:
            case DOUBLE_ARROW_RIGHT:
            case DOUBLE_ARROW_LEFT:
            case DOUBLE_ARROW_BI:
            case QUOTE_OPEN:
            case QUOTE_CLOSE:
            case DASH_SHORT:
            case DASH_LONG:
            case SYMBOL_COPYRIGHT:
            case SYMBOL_TRADEMARK:
            case SYMBOL_REGISTERED:
            case RESOLUTION:
            case NUMBER:
            case WORD:
            case NEW_LINE:
            case LINKO:
            case LINKC:
            case IMAGEO:
            case IMAGEC:
            case DOUBLE_SPACE:
            case DELO:
            case SUPO:
            case SUBO:
            case BOLD:
            case ITALICS:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
              if (jj_2_6(2147483647)) {
                s = format();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case ARROW_RIGHT:
                case ARROW_LEFT:
                case ARROW_BI:
                case DOUBLE_ARROW_RIGHT:
                case DOUBLE_ARROW_LEFT:
                case DOUBLE_ARROW_BI:
                case QUOTE_OPEN:
                case QUOTE_CLOSE:
                case DASH_SHORT:
                case DASH_LONG:
                case SYMBOL_COPYRIGHT:
                case SYMBOL_TRADEMARK:
                case SYMBOL_REGISTERED:
                case RESOLUTION:
                case NUMBER:
                case WORD:
                case NEW_LINE:
                case LINKO:
                case LINKC:
                case IMAGEC:
                case DOUBLE_SPACE:
                case BOLD:
                case ITALICS:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                  if (jj_2_5(2147483647)) {
                    s = newline();
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case ARROW_RIGHT:
                    case ARROW_LEFT:
                    case ARROW_BI:
                    case DOUBLE_ARROW_RIGHT:
                    case DOUBLE_ARROW_LEFT:
                    case DOUBLE_ARROW_BI:
                    case QUOTE_OPEN:
                    case QUOTE_CLOSE:
                    case DASH_SHORT:
                    case DASH_LONG:
                    case SYMBOL_COPYRIGHT:
                    case SYMBOL_TRADEMARK:
                    case SYMBOL_REGISTERED:
                    case RESOLUTION:
                    case NUMBER:
                    case WORD:
                    case NEW_LINE:
                    case LINKO:
                    case LINKC:
                    case IMAGEC:
                    case DOUBLE_SPACE:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                      s = plainTextPiece();
                      break;
                    case BOLD:
                      t = jj_consume_token(BOLD);
            s = t.image;
                      break;
                    case ITALICS:
                      t = jj_consume_token(ITALICS);
            s = t.image;
                      break;
                    default:
                      jj_la1[6] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                  break;
                default:
                  jj_la1[7] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              break;
            default:
              jj_la1[8] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
      if(s.contains("ERROR"))
      {
        {if (true) return "ERROR ";}
      } else
      {
        out += s;
      }
      System.out.println(" | " + out);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW_RIGHT:
      case ARROW_LEFT:
      case ARROW_BI:
      case DOUBLE_ARROW_RIGHT:
      case DOUBLE_ARROW_LEFT:
      case DOUBLE_ARROW_BI:
      case QUOTE_OPEN:
      case QUOTE_CLOSE:
      case DASH_SHORT:
      case DASH_LONG:
      case SYMBOL_COPYRIGHT:
      case SYMBOL_TRADEMARK:
      case SYMBOL_REGISTERED:
      case RESOLUTION:
      case NUMBER:
      case WORD:
      case NEW_LINE:
      case LINKO:
      case LINKC:
      case IMAGEO:
      case IMAGEC:
      case DOUBLE_SPACE:
      case DELO:
      case SUPO:
      case SUBO:
      case BOLD:
      case ITALICS:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
    }
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final public String newline() throws ParseException {
    jj_consume_token(NEW_LINE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      break;
    case PARA:
      jj_consume_token(PARA);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return nl + breakLine + nl;}
    throw new Error("Missing return statement in function");
  }

  final public String number() throws ParseException {
  Token t;
    System.out.print("number ");
    t = jj_consume_token(NUMBER);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String word() throws ParseException {
  Token t;
    System.out.print("word ");
    t = jj_consume_token(WORD);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String plainTextPiece() throws ParseException {
  String s;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW_RIGHT:
    case ARROW_LEFT:
    case ARROW_BI:
    case DOUBLE_ARROW_RIGHT:
    case DOUBLE_ARROW_LEFT:
    case DOUBLE_ARROW_BI:
    case QUOTE_OPEN:
    case QUOTE_CLOSE:
    case DASH_SHORT:
    case DASH_LONG:
    case SYMBOL_COPYRIGHT:
    case SYMBOL_TRADEMARK:
    case SYMBOL_REGISTERED:
    case RESOLUTION:
    case NUMBER:
    case WORD:
    case NEW_LINE:
    case LINKO:
    case IMAGEC:
    case DOUBLE_SPACE:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      s = linkPlainTextPiece();
      break;
    case LINKC:
      s = imagePlainTextPiece();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String linkPlainTextPiece() throws ParseException {
  String s;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW_RIGHT:
    case ARROW_LEFT:
    case ARROW_BI:
    case DOUBLE_ARROW_RIGHT:
    case DOUBLE_ARROW_LEFT:
    case DOUBLE_ARROW_BI:
    case QUOTE_OPEN:
    case QUOTE_CLOSE:
    case DASH_SHORT:
    case DASH_LONG:
    case SYMBOL_COPYRIGHT:
    case SYMBOL_TRADEMARK:
    case SYMBOL_REGISTERED:
    case RESOLUTION:
    case NUMBER:
    case WORD:
    case NEW_LINE:
    case LINKO:
    case DOUBLE_SPACE:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      s = basicPlainTextPiece();
    {if (true) return s;}
      break;
    case IMAGEC:
      t = jj_consume_token(IMAGEC);
    {if (true) return t.image;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String imagePlainTextPiece() throws ParseException {
  String s;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW_RIGHT:
    case ARROW_LEFT:
    case ARROW_BI:
    case DOUBLE_ARROW_RIGHT:
    case DOUBLE_ARROW_LEFT:
    case DOUBLE_ARROW_BI:
    case QUOTE_OPEN:
    case QUOTE_CLOSE:
    case DASH_SHORT:
    case DASH_LONG:
    case SYMBOL_COPYRIGHT:
    case SYMBOL_TRADEMARK:
    case SYMBOL_REGISTERED:
    case RESOLUTION:
    case NUMBER:
    case WORD:
    case NEW_LINE:
    case LINKO:
    case DOUBLE_SPACE:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      s = basicPlainTextPiece();
    {if (true) return s;}
      break;
    case LINKC:
      t = jj_consume_token(LINKC);
    {if (true) return t.image;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String basicPlainTextPiece() throws ParseException {
  String s;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case WORD:
    System.out.print("lptp ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        s = word();
        break;
      case NUMBER:
        s = number();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return s;}
      break;
    case 43:
      jj_consume_token(43);
    {if (true) return "<";}
      break;
    case 44:
      jj_consume_token(44);
    {if (true) return ">";}
      break;
    case 45:
      jj_consume_token(45);
    {if (true) return "*";}
      break;
    case 46:
      jj_consume_token(46);
    {if (true) return "/";}
      break;
    case 47:
      jj_consume_token(47);
    {if (true) return "-";}
      break;
    case 48:
      jj_consume_token(48);
    {if (true) return "[";}
      break;
    case 42:
      jj_consume_token(42);
    {if (true) return " ";}
      break;
    case 49:
      jj_consume_token(49);
    {if (true) return "=";}
      break;
    case 50:
      jj_consume_token(50);
  {if (true) return ".";}
      break;
    case ARROW_RIGHT:
    case ARROW_LEFT:
    case ARROW_BI:
    case DOUBLE_ARROW_RIGHT:
    case DOUBLE_ARROW_LEFT:
    case DOUBLE_ARROW_BI:
    case QUOTE_OPEN:
    case QUOTE_CLOSE:
    case DASH_SHORT:
    case DASH_LONG:
    case SYMBOL_COPYRIGHT:
    case SYMBOL_TRADEMARK:
    case SYMBOL_REGISTERED:
    case RESOLUTION:
    case NEW_LINE:
    case LINKO:
    case DOUBLE_SPACE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINKO:
        t = jj_consume_token(LINKO);
        break;
      case DOUBLE_SPACE:
        t = jj_consume_token(DOUBLE_SPACE);
        break;
      case NEW_LINE:
        t = jj_consume_token(NEW_LINE);
        break;
      case ARROW_RIGHT:
        t = jj_consume_token(ARROW_RIGHT);
        break;
      case ARROW_LEFT:
        t = jj_consume_token(ARROW_LEFT);
        break;
      case ARROW_BI:
        t = jj_consume_token(ARROW_BI);
        break;
      case DOUBLE_ARROW_RIGHT:
        t = jj_consume_token(DOUBLE_ARROW_RIGHT);
        break;
      case DOUBLE_ARROW_LEFT:
        t = jj_consume_token(DOUBLE_ARROW_LEFT);
        break;
      case DOUBLE_ARROW_BI:
        t = jj_consume_token(DOUBLE_ARROW_BI);
        break;
      case QUOTE_OPEN:
        t = jj_consume_token(QUOTE_OPEN);
        break;
      case QUOTE_CLOSE:
        t = jj_consume_token(QUOTE_CLOSE);
        break;
      case DASH_SHORT:
        t = jj_consume_token(DASH_SHORT);
        break;
      case DASH_LONG:
        t = jj_consume_token(DASH_LONG);
        break;
      case SYMBOL_COPYRIGHT:
        t = jj_consume_token(SYMBOL_COPYRIGHT);
        break;
      case SYMBOL_TRADEMARK:
        t = jj_consume_token(SYMBOL_TRADEMARK);
        break;
      case SYMBOL_REGISTERED:
        t = jj_consume_token(SYMBOL_REGISTERED);
        break;
      case RESOLUTION:
        t = jj_consume_token(RESOLUTION);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return t.image;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String wiki() throws ParseException {
  String s;
  Token t;
  String out = "";
    System.out.print("wiki ");
    s = alnum();
    out += s;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 50:
      case 51:
      case 52:
      case 53:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        out += ".";
        break;
      case 47:
        jj_consume_token(47);
        out += "-";
        break;
      case 51:
        jj_consume_token(51);
        out += "_";
        break;
      case 52:
        jj_consume_token(52);
        out += ":";
        break;
      case 53:
        jj_consume_token(53);
        out += "#";
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      s = alnum();
      out += s;
    }
    if (!out.contains(":")) out = "/wiki:" + out;
    else out = "/" + out;
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final public String emailTag() throws ParseException {
  Token t;
    System.out.print("email ");
    jj_consume_token(43);
    t = jj_consume_token(E_MAIL);
    jj_consume_token(44);
    String href = t.image;
    String title = t.image;
    href = href.replaceAll("@", "%20%5Bat%5D%20");
    href = href.replaceAll("\u005c\u005c.", "%20%5Bdot%5D%20");
    title = title.replaceAll("@", " [at] ");
    title = title.replaceAll("\u005c\u005c.", " [dot] ");
    {if (true) return String.format("<a href=\u005c"mailto:%s\u005c" class=\u005c"mail\u005c" title=\u005c"%s\u005c">%s</a>", href, title, title);}
    throw new Error("Missing return statement in function");
  }

  final public String alnum() throws ParseException {
  String s;
  String st = "";
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        s = word();
      st += s;
        break;
      case NUMBER:
        s = number();
      st += s;
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case WORD:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_4;
      }
    }
    {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public String url() throws ParseException {
  Token t;
    t = jj_consume_token(URL);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String link() throws ParseException {
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case WORD:
      s = wiki();
      break;
    case URL:
      s = url();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String imageUrl() throws ParseException {
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    s = url();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    {if (true) return "iurl=[" + s + "]";}
    throw new Error("Missing return statement in function");
  }

  final public String image() throws ParseException {
  Token t;
  String s;
  String url;
  Integer nalign = 0; // 0 - brak, 1 - lewo, 2 - prawo, 3 - oba
  Integer width =-1;
  Integer height =-1;
  String title = "";
  boolean isWiki = false;
    jj_consume_token(IMAGEO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
    nalign += 1;
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    s = link();
    url = s;
    isWiki = url.startsWith("/");
    if (isWiki) url = "/_media" + url;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
    nalign += 2;
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t = jj_consume_token(NUMBER);
          width = Integer.valueOf(t.image);
        break;
      case RESOLUTION:
        t = jj_consume_token(RESOLUTION);
          String w = t.image.substring(0, t.image.indexOf('x'));
          String h = t.image.substring(t.image.indexOf('x') + 1);
          width = Integer.valueOf(w);
          height = Integer.valueOf(h);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      title = "";
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW_RIGHT:
        case ARROW_LEFT:
        case ARROW_BI:
        case DOUBLE_ARROW_RIGHT:
        case DOUBLE_ARROW_LEFT:
        case DOUBLE_ARROW_BI:
        case QUOTE_OPEN:
        case QUOTE_CLOSE:
        case DASH_SHORT:
        case DASH_LONG:
        case SYMBOL_COPYRIGHT:
        case SYMBOL_TRADEMARK:
        case SYMBOL_REGISTERED:
        case RESOLUTION:
        case NUMBER:
        case WORD:
        case NEW_LINE:
        case LINKO:
        case LINKC:
        case DOUBLE_SPACE:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_5;
        }
        s = imagePlainTextPiece();
        title += s;
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(IMAGEC);
    String alignOption = "";
    switch (nalign)
    {
      case 0 : // fall
      case 1 : // fall (align = "left";)
      break;
      case 2 : alignOption = "right";
      break;
      case 3 : alignOption = "middle";
      break;
    }
    String align = (alignOption.isEmpty()) ? "" : " align=\u005c"" + alignOption + "\u005c"";
    String titleAttr = (title.isEmpty()) ? "" : " title=\u005c"" + title + "\u005c"";
    String out = String.format("<img src=\u005c"%s\u005c"%s alt=\u005c"%s\u005c"%s", url, titleAttr, title, align);
    if (width != - 1) out += String.format(" width=\u005c"%d\u005c"", width);
    if (height != - 1) out += String.format(" height=\u005c"%d\u005c"", height);
    out += ">";
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final public String linkTag() throws ParseException {
  Token t;
  String s;
  String url;
  String title = "";
  String titleAttr = "";
  boolean isWiki = false;
    System.out.print("link ");
    jj_consume_token(LINKO);
    s = link();
      url = s;
      isWiki = url.startsWith("/");
      title = (isWiki) ? url.replaceAll("#(.)*", "").substring(url.lastIndexOf(':') + 1) : url;
      titleAttr = (isWiki) ? url.substring(1).replaceAll("#(.)*", "") : url;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW_RIGHT:
      case ARROW_LEFT:
      case ARROW_BI:
      case DOUBLE_ARROW_RIGHT:
      case DOUBLE_ARROW_LEFT:
      case DOUBLE_ARROW_BI:
      case QUOTE_OPEN:
      case QUOTE_CLOSE:
      case DASH_SHORT:
      case DASH_LONG:
      case SYMBOL_COPYRIGHT:
      case SYMBOL_TRADEMARK:
      case SYMBOL_REGISTERED:
      case RESOLUTION:
      case NUMBER:
      case WORD:
      case NEW_LINE:
      case LINKO:
      case IMAGEC:
      case DOUBLE_SPACE:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
          title = "";
        label_6:
        while (true) {
          s = linkPlainTextPiece();
            title += s;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARROW_RIGHT:
          case ARROW_LEFT:
          case ARROW_BI:
          case DOUBLE_ARROW_RIGHT:
          case DOUBLE_ARROW_LEFT:
          case DOUBLE_ARROW_BI:
          case QUOTE_OPEN:
          case QUOTE_CLOSE:
          case DASH_SHORT:
          case DASH_LONG:
          case SYMBOL_COPYRIGHT:
          case SYMBOL_TRADEMARK:
          case SYMBOL_REGISTERED:
          case RESOLUTION:
          case NUMBER:
          case WORD:
          case NEW_LINE:
          case LINKO:
          case IMAGEC:
          case DOUBLE_SPACE:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_6;
          }
        }
        break;
      case IMAGEO:
        s = image();
          title = s;
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(LINKC);
    String rel = (isWiki) ? " rel=\u005c"nofollow\u005c"" : "";
    {if (true) return String.format("<a href=\u005c"%s\u005c" title=\u005c"%s\u005c"%s>%s</a>", url, titleAttr, rel, title);}
    throw new Error("Missing return statement in function");
  }

  final public String typo() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW_RIGHT:
    System.out.print("typo ");
      jj_consume_token(ARROW_RIGHT);
    {if (true) return Character.toString((char) 0x2192);}
      break;
    case ARROW_LEFT:
      jj_consume_token(ARROW_LEFT);
    {if (true) return Character.toString((char) 0x2190);}
      break;
    case ARROW_BI:
      jj_consume_token(ARROW_BI);
    {if (true) return Character.toString((char) 0x2194);}
      break;
    case DOUBLE_ARROW_RIGHT:
      jj_consume_token(DOUBLE_ARROW_RIGHT);
    {if (true) return Character.toString((char) 0x21D2);}
      break;
    case DOUBLE_ARROW_LEFT:
      jj_consume_token(DOUBLE_ARROW_LEFT);
    {if (true) return Character.toString((char) 0x21D0);}
      break;
    case DOUBLE_ARROW_BI:
      jj_consume_token(DOUBLE_ARROW_BI);
    {if (true) return Character.toString((char) 0x21D4);}
      break;
    case QUOTE_OPEN:
      jj_consume_token(QUOTE_OPEN);
    {if (true) return Character.toString((char) 0x00AB);}
      break;
    case QUOTE_CLOSE:
      jj_consume_token(QUOTE_CLOSE);
    {if (true) return Character.toString((char) 0x00BB);}
      break;
    case DASH_SHORT:
      jj_consume_token(DASH_SHORT);
    {if (true) return Character.toString((char) 0x2013);}
      break;
    case DASH_LONG:
      jj_consume_token(DASH_LONG);
    {if (true) return Character.toString((char) 0x2014);}
      break;
    case SYMBOL_COPYRIGHT:
      jj_consume_token(SYMBOL_COPYRIGHT);
    {if (true) return Character.toString((char) 0x00A9);}
      break;
    case SYMBOL_TRADEMARK:
      jj_consume_token(SYMBOL_TRADEMARK);
    {if (true) return Character.toString((char) 0x2122);}
      break;
    case SYMBOL_REGISTERED:
      jj_consume_token(SYMBOL_REGISTERED);
    {if (true) return Character.toString((char) 0x00AE);}
      break;
    case RESOLUTION:
      t = jj_consume_token(RESOLUTION);
    {if (true) return t.image.replaceAll("x", Character.toString((char) 0x00D7));}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String simpleTag() throws ParseException {
  String s;
    System.out.print("simple ");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOLD:
      s = bold();
      break;
    case ITALICS:
      s = italics();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String bold() throws ParseException {
  String s = "";
  String out = "";
    System.out.print("bold ");
    jj_consume_token(BOLD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW_RIGHT:
    case ARROW_LEFT:
    case ARROW_BI:
    case DOUBLE_ARROW_RIGHT:
    case DOUBLE_ARROW_LEFT:
    case DOUBLE_ARROW_BI:
    case QUOTE_OPEN:
    case QUOTE_CLOSE:
    case DASH_SHORT:
    case DASH_LONG:
    case SYMBOL_COPYRIGHT:
    case SYMBOL_TRADEMARK:
    case SYMBOL_REGISTERED:
    case RESOLUTION:
    case NUMBER:
    case WORD:
    case NEW_LINE:
    case LINKO:
    case LINKC:
    case IMAGEO:
    case IMAGEC:
    case DOUBLE_SPACE:
    case DELO:
    case SUPO:
    case SUBO:
    case ITALICS:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW_RIGHT:
        case ARROW_LEFT:
        case ARROW_BI:
        case DOUBLE_ARROW_RIGHT:
        case DOUBLE_ARROW_LEFT:
        case DOUBLE_ARROW_BI:
        case QUOTE_OPEN:
        case QUOTE_CLOSE:
        case DASH_SHORT:
        case DASH_LONG:
        case SYMBOL_COPYRIGHT:
        case SYMBOL_TRADEMARK:
        case SYMBOL_REGISTERED:
        case RESOLUTION:
          s = typo();
          break;
        case ITALICS:
          s = italics();
          break;
        case LINKO:
        case IMAGEO:
        case DELO:
        case SUPO:
        case SUBO:
        case 43:
          s = format();
          break;
        case NUMBER:
        case WORD:
        case NEW_LINE:
        case LINKC:
        case IMAGEC:
        case DOUBLE_SPACE:
        case 42:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
          s = plainTextPiece();
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          out += s;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW_RIGHT:
        case ARROW_LEFT:
        case ARROW_BI:
        case DOUBLE_ARROW_RIGHT:
        case DOUBLE_ARROW_LEFT:
        case DOUBLE_ARROW_BI:
        case QUOTE_OPEN:
        case QUOTE_CLOSE:
        case DASH_SHORT:
        case DASH_LONG:
        case SYMBOL_COPYRIGHT:
        case SYMBOL_TRADEMARK:
        case SYMBOL_REGISTERED:
        case RESOLUTION:
        case NUMBER:
        case WORD:
        case NEW_LINE:
        case LINKO:
        case LINKC:
        case IMAGEO:
        case IMAGEC:
        case DOUBLE_SPACE:
        case DELO:
        case SUPO:
        case SUBO:
        case ITALICS:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_7;
        }
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(BOLD);
    {if (true) return "<b>" + out + "</b>";}
    throw new Error("Missing return statement in function");
  }

  final public String italics() throws ParseException {
  String s = "";
  String out = "";
    System.out.print("italics ");
    jj_consume_token(ITALICS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW_RIGHT:
    case ARROW_LEFT:
    case ARROW_BI:
    case DOUBLE_ARROW_RIGHT:
    case DOUBLE_ARROW_LEFT:
    case DOUBLE_ARROW_BI:
    case QUOTE_OPEN:
    case QUOTE_CLOSE:
    case DASH_SHORT:
    case DASH_LONG:
    case SYMBOL_COPYRIGHT:
    case SYMBOL_TRADEMARK:
    case SYMBOL_REGISTERED:
    case RESOLUTION:
    case NUMBER:
    case WORD:
    case NEW_LINE:
    case LINKO:
    case LINKC:
    case IMAGEO:
    case IMAGEC:
    case DOUBLE_SPACE:
    case DELO:
    case SUPO:
    case SUBO:
    case BOLD:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW_RIGHT:
        case ARROW_LEFT:
        case ARROW_BI:
        case DOUBLE_ARROW_RIGHT:
        case DOUBLE_ARROW_LEFT:
        case DOUBLE_ARROW_BI:
        case QUOTE_OPEN:
        case QUOTE_CLOSE:
        case DASH_SHORT:
        case DASH_LONG:
        case SYMBOL_COPYRIGHT:
        case SYMBOL_TRADEMARK:
        case SYMBOL_REGISTERED:
        case RESOLUTION:
          //s = bold()
                    //|	s = text() // TODO: text __BEZ__ bolda!
                    s = typo();
          break;
        case BOLD:
          s = bold();
          break;
        case LINKO:
        case IMAGEO:
        case DELO:
        case SUPO:
        case SUBO:
        case 43:
          s = format();
          break;
        case NUMBER:
        case WORD:
        case NEW_LINE:
        case LINKC:
        case IMAGEC:
        case DOUBLE_SPACE:
        case 42:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
          s = plainTextPiece();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          out += s;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW_RIGHT:
        case ARROW_LEFT:
        case ARROW_BI:
        case DOUBLE_ARROW_RIGHT:
        case DOUBLE_ARROW_LEFT:
        case DOUBLE_ARROW_BI:
        case QUOTE_OPEN:
        case QUOTE_CLOSE:
        case DASH_SHORT:
        case DASH_LONG:
        case SYMBOL_COPYRIGHT:
        case SYMBOL_TRADEMARK:
        case SYMBOL_REGISTERED:
        case RESOLUTION:
        case NUMBER:
        case WORD:
        case NEW_LINE:
        case LINKO:
        case LINKC:
        case IMAGEO:
        case IMAGEC:
        case DOUBLE_SPACE:
        case DELO:
        case SUPO:
        case SUBO:
        case BOLD:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_8;
        }
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(ITALICS);
    {if (true) return "<i>" + out + "</i>";}
    throw new Error("Missing return statement in function");
  }

  final public String ocTag() throws ParseException {
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
    System.out.print("octag ");
      s = emailTag();
    {if (true) return s;}
      break;
    case DELO:
    case SUPO:
    case SUBO:
      s = htmlTag();
    {if (true) return s;}
      break;
    case IMAGEO:
      s = image();
    {if (true) return s;}
      break;
    case LINKO:
      s = linkTag();
    {if (true) return s;}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String htmlTag() throws ParseException {
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELO:
      s = delTag();
    {if (true) return s;}
      break;
    case SUPO:
      s = supTag();
    {if (true) return s;}
      break;
    case SUBO:
      s = subTag();
    {if (true) return s;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String supTag() throws ParseException {
  String s;
      System.out.print("sup ");
                if(isSup || isSub)
                {
                  System.out.print("ERROR");
                  {if (true) return "ERROR ";}
                } else
                {
                  isSup = true;
                }
    jj_consume_token(SUPO);
    s = text();
    jj_consume_token(SUPC);
    isSup = false;
    {if (true) return "<sup>" + s + "</sup>";}
    throw new Error("Missing return statement in function");
  }

  final public String subTag() throws ParseException {
  String s;
      System.out.print("sub ");
                if(isSup || isSub)
                {
                  System.out.print("ERROR");
                  {if (true) return "ERROR ";}
                } else
                {
                  isSub = true;
                }
    jj_consume_token(SUBO);
    s = text();
    jj_consume_token(SUBC);
    isSub = false;
    {if (true) return "<sub>" + s + "</sub>";}
    throw new Error("Missing return statement in function");
  }

  final public String delTag() throws ParseException {
  String s;
      System.out.print("DEL ");
                if(isDel)
                {
                  System.out.print("ERROR");
                  {if (true) return "ERROR ";}
                } else
                {
                  isDel = true;
                }
    jj_consume_token(DELO);
    s = text();
    jj_consume_token(DELC);
    isDel = false;
    {if (true) return "<del>" + s + "</del>";}
    throw new Error("Missing return statement in function");
  }

//String text() :
//{
//  Token t;
//  String s = "";
//  String out = "";
//}
//{
//  {
//    System.out.print("text ");
//  }
//  (
//    (
//      (
//        (
//          "*"
//          {
//            out += "*";
//          }
//        | "/"
//          {
//            out += "/";
//          }
//        | "_"
//          {
//            out += "_";
//          }
//        )?
//        s = word() // XXX: tymczasowe
//      | s = format()
//      | s = number()
//      )
//      {
//        out += s;
//      }
//    )+
//  )
//  //  < EOF >
//  {
//    return out;
//  }
//}
  final public String format() throws ParseException {
  String s;
    s = ocTag();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String ulist() throws ParseException {
  String s;
  String out = "";
  Integer prevNestLevel = 1;
  Integer nestLevel = 0;
  Integer spaces = 0;
  Stack < Integer > openedLis = new Stack < Integer > ();
    System.out.print("ul ");
    out += "<ul>" + nl;
    label_9:
    while (true) {
      s = "";
      jj_consume_token(DOUBLE_SPACE);
      spaces = 2;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE_SPACE:
        case 42:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
        spaces++;
          break;
        case DOUBLE_SPACE:
          jj_consume_token(DOUBLE_SPACE);
        spaces += 2;
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(45);
      nestLevel = spaces / 2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW_RIGHT:
      case ARROW_LEFT:
      case ARROW_BI:
      case DOUBLE_ARROW_RIGHT:
      case DOUBLE_ARROW_LEFT:
      case DOUBLE_ARROW_BI:
      case QUOTE_OPEN:
      case QUOTE_CLOSE:
      case DASH_SHORT:
      case DASH_LONG:
      case SYMBOL_COPYRIGHT:
      case SYMBOL_TRADEMARK:
      case SYMBOL_REGISTERED:
      case RESOLUTION:
      case NUMBER:
      case WORD:
      case NEW_LINE:
      case LINKO:
      case LINKC:
      case IMAGEO:
      case IMAGEC:
      case DOUBLE_SPACE:
      case DELO:
      case SUPO:
      case SUBO:
      case BOLD:
      case ITALICS:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
        s = text();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      while (prevNestLevel >= nestLevel && !openedLis.isEmpty())
      {
        if (prevNestLevel == openedLis.peek())
        {
          out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
          out += "</li>" + nl;
          openedLis.pop();
        }
        if (prevNestLevel == nestLevel) break;
        else
        {
          out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
          out += "</ul>" + nl;
          prevNestLevel--;
        }
      }
      if (prevNestLevel < nestLevel) for (; prevNestLevel < nestLevel; prevNestLevel++)
      {
        out += new String(new char [ prevNestLevel + openedLis.size() ]).replace('\u005c0', '\u005ct'); // indent
        out += "<ul>" + nl;
      }
      System.out.println(String.format("nl=%d  pnl=%d", nestLevel, prevNestLevel));
      out += new String(new char [ prevNestLevel + openedLis.size() ]).replace('\u005c0', '\u005ct'); // indent
      out += "<li>" + s + nl;
      openedLis.push(nestLevel);
      jj_consume_token(PARA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_SPACE:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_9;
      }
    }
    {}
    for (; prevNestLevel > 0; prevNestLevel--)
    {
      if (prevNestLevel == openedLis.peek())
      {
        out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
        out += "</li>" + nl;
        openedLis.pop();
      }
      out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
      out += "</ul>" + nl;
    }
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final public String olist() throws ParseException {
  String s;
  String out = "";
  Integer prevNestLevel = 1;
  Integer nestLevel = 0;
  Integer spaces = 0;
  Stack < Integer > openedLis = new Stack < Integer > ();
    System.out.print("ol ");
    out += "<ol>" + nl;
    label_11:
    while (true) {
      s = "";
      jj_consume_token(DOUBLE_SPACE);
      spaces = 2;
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE_SPACE:
        case 42:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
        spaces++;
          break;
        case DOUBLE_SPACE:
          jj_consume_token(DOUBLE_SPACE);
        spaces += 2;
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(47);
      nestLevel = spaces / 2;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW_RIGHT:
      case ARROW_LEFT:
      case ARROW_BI:
      case DOUBLE_ARROW_RIGHT:
      case DOUBLE_ARROW_LEFT:
      case DOUBLE_ARROW_BI:
      case QUOTE_OPEN:
      case QUOTE_CLOSE:
      case DASH_SHORT:
      case DASH_LONG:
      case SYMBOL_COPYRIGHT:
      case SYMBOL_TRADEMARK:
      case SYMBOL_REGISTERED:
      case RESOLUTION:
      case NUMBER:
      case WORD:
      case NEW_LINE:
      case LINKO:
      case LINKC:
      case IMAGEO:
      case IMAGEC:
      case DOUBLE_SPACE:
      case DELO:
      case SUPO:
      case SUBO:
      case BOLD:
      case ITALICS:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
        s = text();
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      while (prevNestLevel >= nestLevel && !openedLis.isEmpty())
      {
        if (prevNestLevel == openedLis.peek())
        {
          out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
          out += "</li>" + nl;
          openedLis.pop();
        }
        if (prevNestLevel == nestLevel) break;
        else
        {
          out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
          out += "</ol>" + nl;
          prevNestLevel--;
        }
      }
      if (prevNestLevel < nestLevel) for (; prevNestLevel < nestLevel; prevNestLevel++)
      {
        out += new String(new char [ prevNestLevel + openedLis.size() ]).replace('\u005c0', '\u005ct'); // indent
        out += "<ol>" + nl;
      }
      System.out.println(String.format("nl=%d  pnl=%d", nestLevel, prevNestLevel));
      out += new String(new char [ prevNestLevel + openedLis.size() ]).replace('\u005c0', '\u005ct'); // indent
      out += "<li>" + s + nl;
      openedLis.push(nestLevel);
      jj_consume_token(PARA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_SPACE:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_11;
      }
    }
    for (; prevNestLevel > 0; prevNestLevel--)
    {
      if (prevNestLevel == openedLis.peek())
      {
        out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
        out += "</li>" + nl;
        openedLis.pop();
      }
      out += new String(new char [ openedLis.size() + prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
      out += "</ol>" + nl;
    }
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final public String list() throws ParseException {
  String s;
    if (jj_2_9(3)) {
      // czy L(3) wystarczy, gdy pierwszy poziom np. podw�jnie zagnie�d�ony?
        s = ulist();
    {if (true) return s;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_SPACE:
        s = olist();
    {if (true) return s;}
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String quote() throws ParseException {
  String s;
  String out = "";
  int prevNestLevel = 1;
  int nestLevel = 0;
  boolean brRequired = false;
  boolean first = true;
    System.out.print("q ");
    out += "<blockquote>" + nl;
    label_13:
    while (true) {
      s = "";
      nestLevel = 0;
      brRequired = false;
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          jj_consume_token(44);
        nestLevel++;
          break;
        case QUOTE_CLOSE:
          jj_consume_token(QUOTE_CLOSE);
        nestLevel += 2;
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUOTE_CLOSE:
        case 44:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_14;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW_RIGHT:
      case ARROW_LEFT:
      case ARROW_BI:
      case DOUBLE_ARROW_RIGHT:
      case DOUBLE_ARROW_LEFT:
      case DOUBLE_ARROW_BI:
      case QUOTE_OPEN:
      case QUOTE_CLOSE:
      case DASH_SHORT:
      case DASH_LONG:
      case SYMBOL_COPYRIGHT:
      case SYMBOL_TRADEMARK:
      case SYMBOL_REGISTERED:
      case RESOLUTION:
      case NUMBER:
      case WORD:
      case NEW_LINE:
      case LINKO:
      case LINKC:
      case IMAGEO:
      case IMAGEC:
      case DOUBLE_SPACE:
      case DELO:
      case SUPO:
      case SUBO:
      case BOLD:
      case ITALICS:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
        s = text();
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      brRequired = (nestLevel == prevNestLevel);
      while (prevNestLevel >= nestLevel)
      {
        if (prevNestLevel == nestLevel) break;
        else
        {
          out += new String(new char [ prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
          out += "</blockquote>" + nl;
          prevNestLevel--;
        }
      }
      for (; prevNestLevel < nestLevel; prevNestLevel++)
      {
        out += new String(new char [ prevNestLevel ]).replace('\u005c0', '\u005ct'); // indent
        out += "<blockquote>" + nl;
      }
      out += new String(new char [ prevNestLevel ]).replace('\u005c0', '\u005ct'); // indent
      out += s;
      jj_consume_token(PARA);
      if (brRequired && !first) out += "<br>";
      out += nl;
      first = false;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTE_CLOSE:
      case 44:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_13;
      }
    }
    {}
    for (; prevNestLevel > 0; prevNestLevel--)
    {
      out += new String(new char [ prevNestLevel - 1 ]).replace('\u005c0', '\u005ct'); // indent
      out += "</blockquote>" + nl;
    }
    {if (true) return out;}
    throw new Error("Missing return statement in function");
  }

  final public String headline() throws ParseException {
  String s = "";
  String out = "";
  int signs = 0;
    System.out.println("headline");
    label_15:
    while (true) {
      jj_consume_token(49);
    signs++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_15;
      }
    }
    jj_consume_token(42);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARROW_RIGHT:
      case ARROW_LEFT:
      case ARROW_BI:
      case DOUBLE_ARROW_RIGHT:
      case DOUBLE_ARROW_LEFT:
      case DOUBLE_ARROW_BI:
      case QUOTE_OPEN:
      case QUOTE_CLOSE:
      case DASH_SHORT:
      case DASH_LONG:
      case SYMBOL_COPYRIGHT:
      case SYMBOL_TRADEMARK:
      case SYMBOL_REGISTERED:
      case RESOLUTION:
      case NUMBER:
      case WORD:
      case NEW_LINE:
      case LINKO:
      case LINKC:
      case IMAGEC:
      case DOUBLE_SPACE:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_16;
      }
      s = plainTextPiece();
      out += s;
    }
    jj_consume_token(56);
    label_17:
    while (true) {
      jj_consume_token(49);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_17;
      }
    }
    int level = Math.max(5 - signs + 2, 1);
    {if (true) return String.format("<h%d>%s</h%d>", level, out, level);}
    throw new Error("Missing return statement in function");
  }

  final public String codeBySpaces() throws ParseException {
  String s = "";
  String out = "";
    System.out.println("code");
    label_18:
    while (true) {
      jj_consume_token(DOUBLE_SPACE);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARROW_RIGHT:
        case ARROW_LEFT:
        case ARROW_BI:
        case DOUBLE_ARROW_RIGHT:
        case DOUBLE_ARROW_LEFT:
        case DOUBLE_ARROW_BI:
        case QUOTE_OPEN:
        case QUOTE_CLOSE:
        case DASH_SHORT:
        case DASH_LONG:
        case SYMBOL_COPYRIGHT:
        case SYMBOL_TRADEMARK:
        case SYMBOL_REGISTERED:
        case RESOLUTION:
        case NUMBER:
        case WORD:
        case NEW_LINE:
        case LINKO:
        case LINKC:
        case IMAGEC:
        case DOUBLE_SPACE:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_19;
        }
        s = plainTextPiece();
        out += s;
      }
      jj_consume_token(PARA);
      out += nl;
      System.out.println(nl);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_SPACE:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_18;
      }
    }
    {if (true) return String.format("<pre>%s%s</pre>", nl, out);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_35() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(RESOLUTION)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(SYMBOL_REGISTERED)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(DOUBLE_SPACE)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(SYMBOL_TRADEMARK)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(SYMBOL_COPYRIGHT)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(DASH_LONG)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(DASH_SHORT)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DOUBLE_SPACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(47)) return true;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_scan_token(PARA)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(LINKC)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(QUOTE_CLOSE)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    if (jj_3R_66()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(QUOTE_OPEN)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(DOUBLE_ARROW_BI)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(DOUBLE_ARROW_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(IMAGEC)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(DOUBLE_ARROW_RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(ARROW_BI)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(ARROW_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(ARROW_RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    if (jj_3R_126()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(55)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(DOUBLE_SPACE)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(LINKO)) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_scan_token(LINKC)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(NEW_LINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(DOUBLE_SPACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(45)) return true;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(PARA)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    if (jj_3R_50()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(ITALICS)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(BOLD)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(55)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(RESOLUTION)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    if (jj_3R_82()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(54)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(IMAGEO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    if (jj_scan_token(IMAGEC)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(DELO)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(DELC)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(DOUBLE_SPACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PARA)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    if (jj_3R_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(SUBO)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(SUBC)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(URL)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    if (jj_3R_55()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(42)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(56)) return true;
    if (jj_scan_token(49)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(49)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    if (jj_3R_147()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(SUPO)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(SUPC)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(43)) return true;
    if (jj_scan_token(E_MAIL)) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(QUOTE_CLOSE)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    }
    }
    }
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    if (jj_3R_53()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(PARA)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    if (jj_3R_31()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    if (jj_3R_93()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(ITALICS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    if (jj_scan_token(ITALICS)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    if (jj_3R_92()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(BOLD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_scan_token(BOLD)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public EG1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[62];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400000,0xf809fffe,0xf809fffe,0xf809fffe,0xf80dfffe,0xf84dfffe,0xd809fffe,0xd809fffe,0xf809fffe,0xf809fffe,0xf809fffe,0x40000,0xd809fffe,0xc809fffe,0x9809fffe,0x18000,0x88087ffe,0x8809fffe,0x0,0x0,0x18000,0x18000,0x818000,0x0,0x0,0x0,0x0,0xc000,0x0,0x9809fffe,0x0,0xc809fffe,0xe809fffe,0x0,0x7ffe,0x0,0xf809fffe,0xf809fffe,0xf809fffe,0xf809fffe,0xf809fffe,0xf809fffe,0x28000000,0x0,0x80000000,0x80000000,0xf809fffe,0x80000000,0x80000000,0x80000000,0xf809fffe,0x80000000,0x80000000,0x100,0x100,0xf809fffe,0x100,0x0,0xd809fffe,0x0,0xd809fffe,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20000,0x7fcd5,0x7fcd5,0x7fcd5,0x7fcd5,0x7fcd5,0x7fcc0,0x7fcc0,0x7fcd5,0x7fcd5,0x7fcd5,0x400,0x7fc00,0x7fc00,0x7fc00,0x0,0x0,0x7fc00,0x3c8000,0x3c8000,0x0,0x0,0x0,0x400,0x400,0x400,0x400,0x0,0x400000,0x7fc00,0x800000,0x7fc00,0x7fc00,0x800000,0x0,0xc0,0x7fc95,0x7fc95,0x7fc95,0x7fc55,0x7fc55,0x7fc55,0x815,0x15,0x400,0x400,0x7fcd5,0x0,0x400,0x400,0x7fcd5,0x0,0x0,0x1000,0x1000,0x7fcd5,0x1000,0x20000,0x7fc00,0x20000,0x7fc00,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 62; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
