/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";

  static = false;
}

PARSER_BEGIN(EG1)
package main;

public class EG1
{
  public static final String nl = System.getProperty("line.separator");
}

PARSER_END(EG1)

TOKEN :
{
  < ARROW_RIGHT : "->" >
}

TOKEN :
{
  < NUMBER : (< DIGIT >)+ >
| < WORD : (< LETTER >)+ >
| < #ALNUM :
    (
      < DIGIT >
    | < LETTER >
    )+ >
| < PARA :
    "\r"
  | "\n"
  | "\r\n" >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}

TOKEN :
{
  < URL : "www." < DOMAIN >>
| < #DOMAIN : (< ALNUM > ".")+ < WORD >>
  //| < E_MAIL_TAG : "<" < E_MAIL > ">" >
| < E_MAIL : < E_MAIL_USERNAME > "@" < DOMAIN >>
| < #E_MAIL_USERNAME : (< ALNUM > ".")* < ALNUM >>
}

TOKEN :
{
  < DELO : "<del>" >
| < DELC : "</del>" >
}

TOKEN :
{
  < BOLD : "**" >
| < ITALICS : "//" >
| < UNDERLINE : "__" >
| < NO_FORAT : "%%" >
}

String start() :
{
  String s = "";
  String out = "";
  Token t;
}
{
  {
    System.out.print("START ");
  }
  (
    (
      (
        s = quote()
      | s = list()
      )
      {
        out += s;
      }
    )?
    s = text()
    {
      out += s;
    }
  )+
  < EOF >
  {
    {
      System.out.println("END");
    }
    return out;
  }
}

String text() :
{
  String s;
  Token t;
  String out = "";
}
{
  (
    (
      s = typo()
    )
  |
    (
      LOOKAHEAD(simpleTag())
      s = simpleTag()
    |
      (
        LOOKAHEAD(format())
        s = format()
      | s = plainTextPiece()
      | t = < BOLD >
        {
          s = t.image;
        }
      | t = < ITALICS >
        {
          s = t.image;
        }
      )
    )
    {
      out += s;
    }
  )+
  (
    < PARA >
  | < EOF >
  )
  {
    return out;
  }
}

String number() :
{
  Token t;
}
{
  {
    System.out.print("number ");
  }
  t = < NUMBER >
  {
    return t.image;
  }
}

String word() :
{
  Token t;
}
{
  {
    System.out.print("word ");
  }
  t = < WORD >
  {
    return t.image;
  }
}

String plainTextPiece() :
{
  String s;
  Token t;
}
{
  {
    System.out.print("ptp ");
  }
  (
    s = word()
  | s = number()
  )
  {
    return s;
  }
| "<"
  {
    return "<";
  }
| ">"
  {
    return ">";
  }
| "*"
  {
    return "*";
  }
| "/"
  {
    return "/";
  }
}

String wiki() :
{
  String s;
  Token t;
  String out = "";
}
{
  s = alnum()
  {
    out += s;
  }
  (
    (
      "."
      {
        out += ".";
      }
    | "-"
      {
        out += "-";
      }
    | "_"
      {
        out += "_";
      }
    | ":"
      {
        out += ":";
      }
    )
    s = alnum()
    {
      out += s;
    }
  )*
  {
    return "{wiki=\"" + out + "\"}";
  }
}

String emailTag() :
{
  Token t;
}
{
  "<" t = < E_MAIL > ">"
  {
    return "email=\"" + t.image + "\"";
  }
}

String alnum() :
{
  String s;
  String st = "";
}
{
  (
    s = word()
    {
      st += s;
    }
  | s = number()
    {
      st += s;
    }
  )+
  {
    return st;
  }
}

String url() :
{
  Token t;
}
{
  t = < URL >
  {
    return t.image;
  }
}

String link() :
{
  String s;
}
{
  (
    s = wiki()
  | s = url()
  )
  {
    return s;
  }
}

String imageUrl() :
{
  String s;
}
{
  (
    (" ")? s = url() (" ")?
  )
  {
    return "iurl=[" + s + "]";
  }
}

String image() :
{
  Token t;
  String s;
  String url;
  Integer nalign = 0; // 0 - brak, 1 - lewo, 2 - prawo, 3 - oba
  Integer width =-1;
  Integer height =-1;
  String title = "";
}
{
  "{{" (" "
  {
    nalign += 1;
  }
  )? s = url()
  {
    url = s;
  }
  (" "
  {
    nalign += 2;
  }
  )?
  (
    "?" t = < NUMBER >
    {
      width = Integer.valueOf(t.image);
    }
    (
      t = < WORD >
      {
        if (!(t.image).equals("x")) throw new IllegalArgumentException(t.image);
      }
      t = < NUMBER >
      {
        height = Integer.valueOf(t.image);
      }
    )?
  )?
  ("|" t = < WORD >
  {
    title = t.image;
  }
  )? // TODO: tytul moze byc tekstem!
  "}}"
  {
    String align = "";
    switch (nalign)
    {
      case 0 : // fall
      case 1 : align = "left";
      break;
      case 2 : align = "right";
      break;
      case 3 : align = "middle";
      break;
    }
    if (height == - 1) return String.format("<img src=\"%s\" alt=\"%s\" align=\"%s\" width=\"%d\">", url, title, align, width);
    else return String.format("<img src=\"%s\" alt=\"%s\" align=\"%s\" width=\"%d\" height=\"%d\">", url, title, align, width, height);
  }
}

String linkTag() :
{
  Token t;
  String s;
  String url;
  String title = "";
}
{
  (
    "[[" s = link()
    {
      url = s;
    }
    (
      "|"
      (
        t = < WORD >
        {
          title = t.image;
        }
      | s = image()
        {
          title = s;
        }
      )
    )?
    // TODO: tytul moze byc tekstem!
    "]]"
  )
  {
    return String.format("<a href=\"%s\">%s</a>", url, title);
  }
}

String typo() :
{}
{
  {
    System.out.print("typo ");
  }
  < ARROW_RIGHT >
  {
    return "â€º";
  }
}

String simpleTag() :
{
  String s;
}
{
	{
		 System.out.print("simple ");
	}
  (
    s = bold()
  | s = italics()
  )
  {
    return s;
  }
}

String bold() :
{
  String s = "";
  String out = "";
}
{
  {
    System.out.print("bold ");
  }
  (
    < BOLD >
    (
      (
        (
          s = typo()
        | s = italics()
        | s = format()
        | s = plainTextPiece()
        )
        {
          out += s;
        }
      )+
    )?
    < BOLD >
  )
  {
    return "<b>" + out + "</b>";
  }
}

String italics() :
{
  String s = "";
  String out = "";
}
{
  {
    System.out.print("italics ");
  }
  (
    < ITALICS >
    (
      	(
      		(
      			//s = bold()
    			//|	s = text() // TODO: text __BEZ__ bolda!
    			s = typo()
        		| s = bold()
        		| s = format()
        		| s = plainTextPiece()
    		)
    		{
    			out += s;
    		}
    	)+
    )?
    < ITALICS >
  )
  {
    return "<i>" + out + "</i>";
  }
}

String ocTag() :
{
  String s;
}
{
  s = emailTag()
  {
    return s;
  }
| s = htmlTag()
  {
    return s;
  }
| s = image()
  {
    return s;
  }
| s = linkTag()
  {
    return s;
  }
}

String htmlTag() :
{
  String s;
}
{
  s = delTag()
  {
    return s;
  }
}

String delTag() :
{
  String s;
}
{
  (
    < DELO > s = text() < DELC >
  )
  {
    return "<del>" + s + "</del>";
  }
}

//String text() :
//{
//  Token t;
//  String s = "";
//  String out = "";
//}
//{
//  {
//    System.out.print("text ");
//  }
//  (
//    (
//      (
//        (
//          "*"
//          {
//            out += "*";
//          }
//        | "/"
//          {
//            out += "/";
//          }
//        | "_"
//          {
//            out += "_";
//          }
//        )?
//        s = word() // XXX: tymczasowe
//      | s = format()
//      | s = number()
//      )
//      {
//        out += s;
//      }
//    )+
//  )
//  //  < EOF >
//  {
//    return out;
//  }
//}
String format() :
{
  String s;
}
{
  (
    s = ocTag()
    //  | s = simpleTag()
  )
  {
    return s;
  }
}

String ulist() :
{
  String s;
  String out = "";
  Integer prevNestLevel = 0;
  Integer nestLevel = 0;
  Integer spaces = 0;
}
{
  (
    {
      s = "";
    }
    " "
    {
      spaces = 1;
    }
    (" "
    {
      spaces++;
    }
    )+ "*"
    {
      nestLevel = spaces / 2;
    }
    (
      s = text()
    )?
    {
      if (prevNestLevel < nestLevel) for (; prevNestLevel < nestLevel; prevNestLevel++)
      {
        out += new String(new char [ prevNestLevel ]).replace('\0', '\t'); // indent
        out += "<ul>" + nl;
      }
      else for (; prevNestLevel > nestLevel; prevNestLevel--)
      {
        out += new String(new char [ prevNestLevel - 1 ]).replace('\0', '\t'); // indent
        out += "</ul>" + nl;
      }
      out += new String(new char [ prevNestLevel ]).replace('\0', '\t'); // indent
      out += "<li>" + s + "</li>" + nl;
    }
    (
      < PARA >
    | < EOF >
    )
  )+
  {
    for (; prevNestLevel > 0; prevNestLevel--)
    {
      out += new String(new char [ prevNestLevel - 1 ]).replace('\0', '\t'); // indent
      out += "</ul>" + nl;
    }
    return out;
  }
}

String olist() :
{
  String s;
  String out = "";
  Integer prevNestLevel = 0;
  Integer nestLevel = 0;
  Integer spaces = 0;
}
{
  (
    {
      s = "";
    }
    " "
    {
      spaces = 1;
    }
    (" "
    {
      spaces++;
    }
    )+ "-"
    {
      nestLevel = spaces / 2;
    }
    (
      s = text()
    )?
    {
      if (prevNestLevel < nestLevel) for (; prevNestLevel < nestLevel; prevNestLevel++)
      {
        out += new String(new char [ prevNestLevel ]).replace('\0', '\t'); // indent
        out += "<ol>" + nl;
      }
      else for (; prevNestLevel > nestLevel; prevNestLevel--)
      {
        out += new String(new char [ prevNestLevel - 1 ]).replace('\0', '\t'); // indent
        out += "</ol>" + nl;
      }
      out += new String(new char [ prevNestLevel ]).replace('\0', '\t'); // indent
      out += "<li>" + s + "</li>" + nl;
    }
    (
      < PARA >
    | < EOF >
    )
  )+
  {
    for (; prevNestLevel > 0; prevNestLevel--)
    {
      out += new String(new char [ prevNestLevel - 1 ]).replace('\0', '\t'); // indent
      out += "</ol>" + nl;
    }
    return out;
  }
}

String list() :
{
  String s;
}
{
  LOOKAHEAD(3)
  s = ulist()
  {
    return s;
  }
| s = olist()
  {
    return s;
  }
}

String quote() :
{
  String s = "";
  String out = "";
  Integer prevNestLevel = 0;
  Integer nestLevel = 0;
}
{
  (
    {
      s = "";
    }
    (">"
    {
      nestLevel++;
    }
    )+
    (
      s = text()
    )?
    {
      if (prevNestLevel < nestLevel) for (; prevNestLevel < nestLevel; prevNestLevel++)
      {
        out += new String(new char [ prevNestLevel ]).replace('\0', '\t'); // indent
        out += "<blockquote>" + nl;
      }
      else for (; prevNestLevel > nestLevel; prevNestLevel--)
      {
        out += new String(new char [ prevNestLevel - 1 ]).replace('\0', '\t'); // indent
        out += "</blockquote>" + nl;
      }
      out += new String(new char [ prevNestLevel ]).replace('\0', '\t'); // indent
      out += s + nl;
    }
    (
      < PARA >
    | < EOF >
    )
    {
      nestLevel = 0;
    }
  )+
  {
    for (; prevNestLevel > 0; prevNestLevel--)
    {
      out += new String(new char [ prevNestLevel - 1 ]).replace('\0', '\t'); // indent
      out += "</blockquote>" + nl;
    }
    return out;
  }
}
